// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// VSpherePlatformFailureDomainSpecApplyConfiguration represents a declarative configuration of the VSpherePlatformFailureDomainSpec type for use
// with apply.
type VSpherePlatformFailureDomainSpecApplyConfiguration struct {
	Name       *string                                    `json:"name,omitempty"`
	Region     *string                                    `json:"region,omitempty"`
	RegionType *string                                    `json:"regionType,omitempty"`
	Zone       *string                                    `json:"zone,omitempty"`
	ZoneType   *string                                    `json:"zoneType,omitempty"`
	Server     *string                                    `json:"server,omitempty"`
	Topology   *VSpherePlatformTopologyApplyConfiguration `json:"topology,omitempty"`
}

// VSpherePlatformFailureDomainSpecApplyConfiguration constructs a declarative configuration of the VSpherePlatformFailureDomainSpec type for use with
// apply.
func VSpherePlatformFailureDomainSpec() *VSpherePlatformFailureDomainSpecApplyConfiguration {
	return &VSpherePlatformFailureDomainSpecApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *VSpherePlatformFailureDomainSpecApplyConfiguration) WithName(value string) *VSpherePlatformFailureDomainSpecApplyConfiguration {
	b.Name = &value
	return b
}

// WithRegion sets the Region field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Region field is set to the value of the last call.
func (b *VSpherePlatformFailureDomainSpecApplyConfiguration) WithRegion(value string) *VSpherePlatformFailureDomainSpecApplyConfiguration {
	b.Region = &value
	return b
}

// WithRegionType sets the RegionType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RegionType field is set to the value of the last call.
func (b *VSpherePlatformFailureDomainSpecApplyConfiguration) WithRegionType(value string) *VSpherePlatformFailureDomainSpecApplyConfiguration {
	b.RegionType = &value
	return b
}

// WithZone sets the Zone field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Zone field is set to the value of the last call.
func (b *VSpherePlatformFailureDomainSpecApplyConfiguration) WithZone(value string) *VSpherePlatformFailureDomainSpecApplyConfiguration {
	b.Zone = &value
	return b
}

// WithZoneType sets the ZoneType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ZoneType field is set to the value of the last call.
func (b *VSpherePlatformFailureDomainSpecApplyConfiguration) WithZoneType(value string) *VSpherePlatformFailureDomainSpecApplyConfiguration {
	b.ZoneType = &value
	return b
}

// WithServer sets the Server field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Server field is set to the value of the last call.
func (b *VSpherePlatformFailureDomainSpecApplyConfiguration) WithServer(value string) *VSpherePlatformFailureDomainSpecApplyConfiguration {
	b.Server = &value
	return b
}

// WithTopology sets the Topology field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Topology field is set to the value of the last call.
func (b *VSpherePlatformFailureDomainSpecApplyConfiguration) WithTopology(value *VSpherePlatformTopologyApplyConfiguration) *VSpherePlatformFailureDomainSpecApplyConfiguration {
	b.Topology = value
	return b
}
